plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.25'

    // service, transactional 등 CGLib 사용하여 프록시 생성하는 Bean 을 위한 open 설정
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
    id 'org.springframework.boot' version '3.4.0'
    id 'io.spring.dependency-management' version '1.1.6'

    // 기본 생성자 생성
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.25'

    // querydsl
    id 'org.jetbrains.kotlin.kapt' version '1.9.25'

    // grpc
    id 'com.google.protobuf' version "0.9.4"
}

group = 'groot'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

ext {
    grpcProtoVersion = '1.54.0'
    grpcKotlinVersion = '1.3.0'
    grpcProtoKotlinVersion = '3.21.12'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    implementation 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    implementation 'com.querydsl:querydsl-sql:5.0.0'
    implementation 'jakarta.persistence:jakarta.persistence-api'
    implementation 'jakarta.annotation:jakarta.annotation-api'
    kapt 'com.querydsl:querydsl-apt:5.0.0:jakarta'
    kapt 'org.springframework.boot:spring-boot-configuration-processor'

    // kotest
    testImplementation 'io.kotest:kotest-runner-junit5:5.9.1'
    testImplementation 'io.kotest:kotest-assertions-core:5.9.1'
    testImplementation 'io.mockk:mockk:1.13.14'

    // grpc
    implementation "io.grpc:grpc-protobuf:${grpcProtoVersion}"
    implementation "io.grpc:grpc-kotlin-stub:${grpcKotlinVersion}"
    implementation "com.google.protobuf:protobuf-kotlin:${grpcProtoKotlinVersion}"

    // grpc spring boot
    implementation 'net.devh:grpc-spring-boot-starter:3.1.0.RELEASE'
}

kotlin {
    compilerOptions {
        // null 안정성 경고 어노테이션 strict 하게 적용
        freeCompilerArgs.addAll '-Xjsr305=strict'
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

// kotlin class 는 기본 final 이기 때문에 상속, 지연로딩 등 스프링에서 필요한 기능이 제한되어 open 필요
allOpen {
    annotation("jakarta.persistence.Entity")
    annotation("jakarta.persistence.Embeddable")
    annotation("jakarta.persistence.MappedSuperclass")
}

// gRPC source 경로
sourceSets {
    main {
        java {
            srcDirs(
                    'build/generated/source/proto/main/java',
                    'build/generated/source/proto/main/kotlin'
            )
        }
    }
}

// grpc
protobuf {
    // protoc 컴파일러 설정
    protoc {
        artifact = "com.google.protobuf:protoc:${grpcProtoKotlinVersion}"
    }

    // gRPC 플러그인 설정, 코틀린용 코드 생성기
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcProtoVersion}"
        }
        grpckt {
            artifact = "io.grpc:protoc-gen-grpc-kotlin:${grpcKotlinVersion}:jdk8@jar"
        }
    }

    // proto 파일 생성 태스크 설정
    generateProtoTasks {
        // 프로젝트의 모든 all() proto 파일에 대해 Java/Kotlin gRPC 코드 생성
        all()*.plugins {
            grpc {}
            //grpckt {} // 코루틴 기반 코드 생성
        }
        // Kotlin 언어로  Protobuf 메시지 클래스 생성
        all()*.builtins {
            kotlin {}
        }
    }
}
